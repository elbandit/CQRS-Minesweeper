// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.7.1.0
//      SpecFlow Generator Version:1.7.0.0
//      Runtime Version:4.0.30319.235
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Columbo.Minesweeper.Specs.Uat.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.7.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Resuming A Game")]
    public partial class ResumingAGameFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ResumingAGame.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Resuming A Game", "In order to complete the game in more than one sitting\r\nAs a player\r\nI want to be" +
                    " able to resume my unfinished game", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Resuming a game")]
        public virtual void ResumingAGame()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resuming a game", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I have started a new game \"minefield size of 9 x 9 (10 mines)\"");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Row",
                        "Column"});
            table1.AddRow(new string[] {
                        "2",
                        "2"});
#line 8
 testRunner.And("the minefield contains the following mines:", ((string)(null)), table1);
#line 11
 testRunner.When("I navigate to the game play page");
#line 12
 testRunner.And("I click on the tile at coordinate 0,0");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Row",
                        "Column",
                        "NumberOfMinesSurroundedBy"});
            table2.AddRow(new string[] {
                        "0",
                        "0",
                        "0"});
#line 13
 testRunner.Then("the following tiles should be revealed:", ((string)(null)), table2);
#line 16
 testRunner.When("I return to the home page");
#line 17
 testRunner.Then("I should see an option to resume my game");
#line 18
 testRunner.When("I click resume");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Row",
                        "Column",
                        "NumberOfMinesSurroundedBy"});
            table3.AddRow(new string[] {
                        "0",
                        "0",
                        "0"});
#line 19
 testRunner.Then("the following tiles should be revealed:", ((string)(null)), table3);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Start a new game rather than finishing a current game")]
        public virtual void StartANewGameRatherThanFinishingACurrentGame()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Start a new game rather than finishing a current game", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
 testRunner.Given("I have started a new game \"minefield size of 9 x 9 (10 mines)\"");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Row",
                        "Column"});
            table4.AddRow(new string[] {
                        "2",
                        "2"});
#line 25
 testRunner.And("the minefield contains the following mines:", ((string)(null)), table4);
#line 28
 testRunner.When("I navigate to the game play page");
#line 29
 testRunner.And("I click on the tile at coordinate 0,0");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Row",
                        "Column",
                        "NumberOfMinesSurroundedBy"});
            table5.AddRow(new string[] {
                        "0",
                        "0",
                        "0"});
#line 30
 testRunner.Then("the following tiles should be revealed:", ((string)(null)), table5);
#line 33
 testRunner.When("I return to the home page");
#line 34
 testRunner.Then("I should see an option to start a new game");
#line 35
 testRunner.When("I click \"minefield size of 16 x 16 (40 mines)\"");
#line 36
 testRunner.Then("I should see a minefield containing \"16\" x \"16\" mines all unrevealed");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#endregion
